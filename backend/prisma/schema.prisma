generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                @id @default(autoincrement())
  firstName   String             // User's first name
  lastName    String             // User's last name
  email       String             @unique
  password    String
  role        Role
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  profile     Profile?
  sentRequests    ConnectionRequest[] @relation("SentRequests")
  receivedRequests ConnectionRequest[] @relation("ReceivedRequests")
  mentorConnections Connection[] @relation("MentorConnections")
  menteeConnections Connection[] @relation("MenteeConnections")
  notifications Notification[]

  @@map("users") // Maps to 'users' table in the database
}

model Profile {
  id          Int      @id @default(autoincrement())
  bio         String?
  skills      String[] // Array of skills
  interests   String[] // Array of interests
  location    String?  // User's location (optional)
  userId      Int      @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("profiles") // Maps to 'profiles' table in the database
}

model ConnectionRequest {
  id           Int           @id @default(autoincrement())
  senderId     Int
  senderName   String         // Sender's name
  receiverId   Int
  receiverName String         // Receiver's name
  status       RequestStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  sender       User     @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  receiver     User     @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("connection_requests") // Maps to 'connection_requests' table in the database
}

model Connection {
  id          Int      @id @default(autoincrement())
  mentorId    Int
  mentorName  String   // Mentor's name
  menteeId    Int
  menteeName  String   // Mentee's name
  createdAt   DateTime @default(now())

  mentor      User     @relation("MentorConnections", fields: [mentorId], references: [id], onDelete: Cascade)
  mentee      User     @relation("MenteeConnections", fields: [menteeId], references: [id], onDelete: Cascade)

  @@map("connections") // Maps to 'connections' table in the database
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications") // Maps to 'notifications' table in the database
}

enum Role {
  MENTOR
  MENTEE
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
